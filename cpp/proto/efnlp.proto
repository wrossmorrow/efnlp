syntax = "proto3";

package efnlp.v1alpha1;

option go_package = "github.com/wrossmorrow/efnlp/v1alpha1;efnlp_v1alpha1";

message Version {
	uint32 major = 1;
	uint32 minor = 2;
}

message Language {
	// A "language" specifies how to convert (utf-8?) character sequences into 
	// "token" sequences. A "token" is just a uint32. Here, we use a list of 
	// "Encoder" objects that map 
	string name = 1;
	Version version = 2;
	repeated Encoder lang = 3;
}

message Encoder {
	uint32 token = 1;
	string data = 2; // utf-8 or 7b ASCII text less than 2**32 units long (~ 4B chars)

	// More general?
	// oneof data {
	// 	uint8 char = 3; // 8 doesn't exist, just 32, 64
	// 	string str = 4;
	// 	bytes bin = 5
	// }
}

message Token {
	uint32 value = 1;
}

message Sampler {
	uint32 total = 1; // 64? MaxUInt32 ~ 4.3B which sounds pretty high. And we _can_ reduce...
	repeated SamplerTokenCount counts = 2;
}

message SamplerTokenCount {
	uint32 token = 1;
	uint32 count = 2;
}

message SuffixTree {
	uint32 token = 1;
	Sampler sampler = 2;
	repeated SuffixTree prefixes = 3;
}

message SuffixTreeSet {
	// size, depth?
	repeated SuffixTree prefixes = 1;
}
